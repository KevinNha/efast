'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable react/display-name */
/* eslint-disable react/no-array-index-key */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _simpleMarkdown = require('simple-markdown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (styles) {
  return {
    autolink: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.link },
          output(node.content, state)
        );
      }
    },
    blockQuote: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.View,
          {
            key: state.key,
            style: [styles.blockQuoteSection, styles.blockQuote]
          },
          _react2.default.createElement(_reactNative.View, {
            key: state.key + '-view',
            style: [styles.blockQuoteSectionBar, styles.blockQuoteBar]
          }),
          _react2.default.createElement(
            _reactNative.Text,
            { key: state.key + '-text', style: styles.blockQuoteText },
            output(node.content, state)
          )
        );
      }
    },
    br: {
      react: function react(node, output, state) {
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.br },
          '\\n\\n'
        );
      }
    },
    codeBlock: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.codeBlock },
          null
        );
      }
    },
    del: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.del },
          output(node.content, state)
        );
      }
    },
    em: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.em },
          output(node.content, state)
        );
      }
    },
    heading: {
      match: (0, _simpleMarkdown.blockRegex)(/^ *(#{1,6}) ([^\n]+?)#* *(?:\n *)+\n/),
      react: function react(node, output, parentState) {
        var state = _extends({}, parentState);
        state.withinText = true;
        var stylesToApply = [styles.heading, styles['heading ' + node.level]];
        state.stylesToApply = stylesToApply;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: stylesToApply },
          output(node.content, state)
        );
      }
    },
    hr: {
      react: function react(node, output, state) {
        return _react2.default.createElement(_reactNative.View, { key: state.key, style: styles.hr });
      }
    },
    image: {
      react: function react(node, output, state) {
        return _react2.default.createElement(_reactNative.Image, {
          key: state.key,
          resizeMode: styles.resizeMode || 'contain',
          source: { uri: node.target },
          style: node.target.match(/youtu|vimeo/) ? styles.video : styles.image
        });
      }
    },
    inlineCode: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.inlineCode },
          node.content
        );
      }
    },
    link: {
      react: function react(node, output, state) {
        state.withinText = true;
        var openUrl = function openUrl(url) {
          _reactNative.Linking.openURL(url).catch(function (error) {
            return console.warn('An error occurred: ', error);
          });
        };
        return _react2.default.createElement(
          _reactNative.Text,
          {
            key: state.key,
            onPress: function onPress() {
              return openUrl(node.target);
            },
            style: node.target.match(/@/) ? styles.mailTo : styles.link
          },
          output(node.content, state)
        );
      }
    },
    list: {
      react: function react(node, output, state) {
        var items = node.items.map(function (item, i) {
          var bullet = void 0;
          if (node.ordered) {
            bullet = _react2.default.createElement(
              _reactNative.Text,
              { key: state.key, style: styles.listItemNumber },
              i + 1 + ' . '
            );
          } else {
            bullet = _react2.default.createElement(
              _reactNative.Text,
              { key: state.key, style: styles.listItemBullet },
              styles.listItemBulletType ? styles.listItemBulletType + ' ' : '\u2022 '
            );
          }
          var listItemText = _react2.default.createElement(
            _reactNative.View,
            { key: state.key + 1, style: styles.listItemText },
            output(item, state)
          );
          return _react2.default.createElement(
            _reactNative.View,
            { key: i, style: styles.listItem },
            bullet,
            listItemText
          );
        });
        return _react2.default.createElement(
          _reactNative.View,
          { key: state.key, style: styles.list },
          items
        );
      }
    },
    newline: {
      react: function react(node, output, state) {
        return _react2.default.createElement(_reactNative.Text, { key: state.key, style: styles.newline });
      }
    },
    paragraph: {
      react: function react(node, output, state) {
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.paragraph },
          output(node.content, state)
        );
      }
    },
    strong: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.strong },
          output(node.content, state)
        );
      }
    },
    table: {
      react: function react(node, output, state) {
        var headers = node.header.map(function (content, i) {
          return _react2.default.createElement(
            _reactNative.Text,
            { key: i, style: styles.tableHeaderCell },
            output(content, state)
          );
        });

        var header = _react2.default.createElement(
          _reactNative.View,
          { style: styles.tableHeader },
          headers
        );

        var rows = node.cells.map(function (row, r) {
          var cells = row.map(function (content, c) {
            return _react2.default.createElement(
              _reactNative.View,
              { key: c, style: styles.tableRowCell },
              output(content, state)
            );
          });
          var rowStyles = [styles.tableRow];
          node.cells.length - 1 === r ? rowStyles.push(styles.tableRowLast) : null;
          return _react2.default.createElement(
            _reactNative.View,
            { key: r, style: rowStyles },
            cells
          );
        });

        return _react2.default.createElement(
          _reactNative.View,
          { key: state.key, style: styles.table },
          header,
          rows
        );
      }
    },
    text: {
      react: function react(node, output, parentState) {
        var state = _extends({}, parentState);
        var textStyles = [styles.text];
        !state.withinText ? textStyles.push(styles.plainText) : null;
        state.stylesToApply ? textStyles.push(state.stylesToApply) : null;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: textStyles },
          node.content
        );
      }
    },
    u: {
      react: function react(node, output, state) {
        state.withinText = true;
        return _react2.default.createElement(
          _reactNative.Text,
          { key: state.key, style: styles.u },
          output(node.content, state)
        );
      }
    },
    url: {
      react: function react(node, output, state) {
        state.withinText = true;
        var openURL = function openURL(url) {
          _reactNative.Linking.openURL(url).catch(function (error) {
            return console.warn('An error occurred: ', error);
          });
        };
        return _react2.default.createElement(
          _reactNative.Text,
          {
            key: state.key,
            style: styles.url,
            onPress: function onPress() {
              return openURL(node.target);
            }
          },
          output(node.content, state)
        );
      }
    }
  };
};