'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _concat = require('lodash/concat');

var _concat2 = _interopRequireDefault(_concat);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _pullAll = require('lodash/pullAll');

var _pullAll2 = _interopRequireDefault(_pullAll);

var _simpleMarkdown = require('simple-markdown');

var _simpleMarkdown2 = _interopRequireDefault(_simpleMarkdown);

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Markdown = function Markdown(_ref) {
  var _ref$blacklist = _ref.blacklist,
      blacklist = _ref$blacklist === undefined ? [] : _ref$blacklist,
      _ref$children = _ref.children,
      children = _ref$children === undefined ? '' : _ref$children,
      _ref$errorHandler = _ref.errorHandler,
      errorHandler = _ref$errorHandler === undefined ? function () {
    return null;
  } : _ref$errorHandler,
      _ref$rules = _ref.rules,
      rules = _ref$rules === undefined ? {} : _ref$rules,
      _ref$styles = _ref.styles,
      styles = _ref$styles === undefined ? _styles2.default : _ref$styles,
      _ref$whitelist = _ref.whitelist,
      whitelist = _ref$whitelist === undefined ? [] : _ref$whitelist;

  var postProcessRules = function postProcessRules(preRules) {
    var defaultRules = ['paragraph', 'text'];
    if (whitelist.length) {
      return (0, _pick2.default)(preRules, (0, _concat2.default)(whitelist, defaultRules));
    }if (blacklist.length) {
      return (0, _omit2.default)(preRules, (0, _pullAll2.default)(blacklist, defaultRules));
    }
    return preRules;
  };

  var renderContent = function renderContent(child) {
    try {
      var mergedStyles = (0, _merge2.default)({}, _styles2.default, styles);
      var processedRules = postProcessRules((0, _merge2.default)({}, _simpleMarkdown2.default.defaultRules, (0, _rules2.default)(mergedStyles), rules));
      var childrenByLine = child.split('\n');
      var tree = childrenByLine.map(function (str) {
        return _simpleMarkdown2.default.parserFor(processedRules)(str, {
          inline: false
        })[0];
      });
      return _simpleMarkdown2.default.outputFor(processedRules, 'react')(tree);
    } catch (errors) {
      errorHandler ? errorHandler(errors, child) : console.error(errors);
    }
    return null;
  };

  return _react2.default.createElement(
    _reactNative.View,
    { style: [_styles2.default.view, styles.view] },
    renderContent(children)
  );
};

exports.default = _react2.default.memo(Markdown);